I'm going to basically go over ways that I've been thinking about basically like hardening lightning in terms of basically making security better, making the client more scalable itself and then addressing some issues and pain points that come up with times when you're dealing with fees on the mainnet. There's going to be some change I'm going to propose to Bitcoin, but my opinion is that they're relatively minor, so I can maybe see a pretty good chance of them getting in. There aren't really big sweeping changes. One's a new say-catch type, and one is a new op code, and then there's covenants, but that's a whole other story in itself though.

Yeah, so a quick overview first. I'm going to give an overview of the lightning security model. I won't really go into the mechanics of lightning itself as is now because I assume people know what that is vaguely. You have payment channels, you connect them, you can route across them. I know that's the gist of it. I'm going to talk about hardening the contract breach events. Some people talk about ways you can do that in terms of adding more consensus changes. We're going at it from a point of view of doing a different strategy when a breach actually happens in the face of a large backlog. Then I'll go into a new channel type, a new channel design for basically making the channels more succinct, meaning you have to store less history and also things like outsourcing a lot more efficient as well. Then I'm going to talk about kind of like outsourcing and kind of like a newer model and a model that assumes, has basically minimized the client state as much as possible because if you want this to actually scale and the ask for just to basically support a large number of clients, then we basically want them to store as much little state as possible itself. Then we go into basically making lightning a little more succinct on-chain because if it's off-chain protocol, you want to basically ensure that we have the smallest footprint on-chain as possible, right? Otherwise, it's not really scaling because you're hitting the chain every single time, so it's just to be off-chain itself.

All right, so first, security model. There's this little kind of like layers of lightning over here. People always say it's like layer two, but to me, there's like a lot more layers on top of that, right? So for me, layer one is basically blockchain itself, Bitcoin or whatever else that is. Layer two is actually just like the link layer between channels, right? So this is basically how do I open channels between me and Bob and how do Bob not actually update that channel? Layer three is kind of like the end-to-end routing, so like, you know, HTLCs and like, you know, nRiding or whatever else that is. Then layer four is kind of like the application layer. We were actually like building a couple of lightning, things like exchanges and whatever.

I have emojis there, but I guess it didn't translate somehow, but that's okay.

So basically the way lightning works, it basically uses Bitcoin as, or you know, whatever else, probably Bitcoin is basically like a dispute mediation system, right? So rather than like every single transaction going on Bitcoin itself, we basically say, all right, we do contract creation on Bitcoin itself and we do, you know, enforcement, but the execution is actually off-chain, right? So you know, we do the creation initially, we do all the execution on the side, and that makes it really succinct, and that's fine. And basically what we do, we basically treat, you know, the chain is like in this like trust anchor, right? So basically the way it works is that any time we have a dispute, we basically go to the blockchain with our evidence, and with that evidence we can basically say that, hey, you know, Bob was cheating me, he violated clause number five from the contract, and then I get all the money back basically, right?

And you know, basically the way it is, we kind of have like the easy way or the hard way, optimistically, we can basically just do everything off-chain, or if we're actually going to exit the contract, then we kind of just do like signatures between each other, and boom, it goes on-chain, everything's fine. The hard way is basically in the case that I have to go on-chain, and either, you know, sweep contracts myself, or possibly go on-chain to, you know, actually do like a proper dispute, because you violated something in the contract itself. And you know, one way to handle a dispute, we basically say that we can write the chain eventually, but eventually this is basically configured by, you know, a time parameter called t, which is like a CSV value, right? Which means that any time someone goes to chain, there's basically like a contestation period, and I have up until time t to basically refute their claim, right? And we say eventually because t can be configured, and you basically want to configure t based on like the size of the channel, if it's a $10 channel, maybe you want like a few hours, if it's a million dollars, maybe you want like, you know, a month or whatever else, right?

And the other thing we assume as well is that, you know, we're assuming that like miners or pool operators aren't colluding against us, basically, because otherwise they can basically just censor all our transactions on chain, right? So and we also assume like a level of decentralization in the mining, because otherwise, you know, you can get blacklisted, but you know, there are ways where you can try to make the channels basically blend with everything else in the network. And there's some really cool work on that front too itself.

So but yeah, all right, moving on now talking about a little bit about contract breach defense strategy, right? So something that comes up a lot is basically people are, you know, asking like, all right, how do I handle a contract breach in the case of basically like massive backlog, right? This is the case where maybe, you know, for whatever reason, like fees are sky high, someone's spamming the chain, and then someone tries to actually do a contract breach. What am I going to do from there on, right? So you know, there's some things that people worked on terms of like adding new content changes to Bitcoin, where maybe something like, you know, the time lock would stop after the block was so full, or possibly like, you know, you'd have some kind of like pre allocated like arena where you can kind of like, you know, do battle for your smart contracts. This is basically looking from a little more strategic standpoint, and looking at basically the dynamics on the fees of the way we actually handle the commit transaction itself, right?

So whenever someone tries to broadcast a prior state, maybe I should have this out or whatever, that's okay. They're basically locked into that particular state, right? So you know, Bob basically had $2 on the newest state, and he had 10 of the other states are going to go back to the $10 state, right? At that point, Bob can only access just his money from the channel itself, right? But me myself, because I'm, he actually revoked all those outputs, I have a little more rigor room. So what I can do is basically, I can progressively start to siphon Bob fees, basically into minor fees, right? So this is now a situation where it's kind of like, you know, some strategy there, because Bob basically has two options. He can basically stop, or I can keep going, and I'm going to eventually siphon all his money into minor fees, right? The only way his will actually succeed, basically getting that prior transaction into the chain, is if he pays more in minors fees than actually in his balance himself, right? And he can either do that by using pays for parent. Well, that's the only option really, right? So I think this is a pretty good, you know, kind of intermediate approach. And basically what we're doing here is that like the gesture transaction is going to be using replaced by fee. We're going to use that to progressively bump up in time from the fees, you know, the money of the cheater, basically into fees. And I think it's a pretty good, you know, stopgap in terms of, you know, the way things work right now, that if you have someone that can be vigilant at all, you can basically almost always, you know, penalize this person, right? So even if there's a massive backlog, assuming the minor one's the, you know, package with a higher fee rate, then, well, you know, Bob basically gets nothing, right? So now this basically adds even further incentive, you know, from actually, you know, people trying to do cheating, because now there's this kind of, you know, kind of like strategy where basically I can just pull your money's minor fees and you get nothing. And you know, I'm so made whole this entire time. So you know, whenever this happens, I'm okay, I want to punish Bob, right? This is me punishing him in the, you know, the worst way possible. And I'm going to basically jump to the queue, front of the queue for everything else in the, you know, in the mem pool, right? So like I could have put maybe like 20 BTC towards fees and I'm fine. I'm just punishing him. So basically squirt stirred and I, and I basically wipe my hands, I walk away, everything's okay.

All right, so now we're going to talk about basically kind of like scaling lightning itself, right? You know, basically from the client's side of it, right? So basically the way it works is that because contract execution is local, we kind of have like a local transcript, right? And every single time we do a new state update, there's kind of like a shadow chain, right? By shadow chain, I basically mean that we have like, it's kind of like a blockchain itself because the states refer to each other in a particular way. But also we can basically do state transitions between these states themselves, right? And you know, the shadow chain is only ever like manifested on chain in the case of basically like a contract breach or if I just want to force close, right? Typically in the normal case, we basically do a regular cooperative close, which means you know, we both side multi-sig, we go on chain, you see nothing else, right? So the shadow chain is only manifested in the case of a breakdown or some type of breach remedy thing, right?

And you know, these state transitions we have in the channel, you know, they can be super generic, you know, probably like later this year, we may get fancier, some cooler stuff. Right now it's basically just adding new HCLCs, weaving HCLCs and basically keeping track of that prior state itself. So the goal here is basically to reduce the amount of state that the client needs to keep track of. This can be good because if they can keep track of less state, they can basically, you know, have kind of like more high throughput changes, but also, it has implications for the outsource, I'll get into it a little bit later, right? If the state required for the client to actually, you know, act on the contract is reduced and that makes the outsource more succinct as well, and if the outsource is succinct, then people are going to run them and if people are going to run them, we have more security. So it's kind of like, you know, like a laudable goal to actually go forward.

So first, before we get into this, we're going to talk about the history of basically how you do commitment and validation on Lightning, right? So I was talking about basically that you have a series of states and you basically walk forward in these states one by one, right? Every single time we go to a new state, we basically revoke the old one, right? So that's like the state sequence, we were on state number one, revoked it, state number two revoked it, now we're on state number three, right? So like, you know, central question, basically the way we do channels, basically how do you do invalidation? One thing to note is that this only matters for bidirectional channels when you're basically going both ways, right? If it's a unidirectional channel, every single state update I do is basically benefiting, you know, the other participants in some way, so they don't really have an incentive to go back on the prior states. But if I'm in a bidirectional channel, there's likely some point in history where we are currently which, in which the other participants are better off, right? So that they have some incentives to basically try to cheat me and try to go back to that prior state, but we solve this basically by invalidating every single state once we make a new one, right? And the penalty here is that if I ever catch you, which is in the contract, if I ever catch you broadcasting a prior state, you basically get slashed, which means, you know, your money all goes away and that kind of has some strategy and that other thing itself, right? So you're naively, naively you basically keep all the prior states, right? But, you know, that's not very good because now you have like this, like, you know, linear, you know, linearly going storage as you're going to do these updates, right? And, you know, people like lightning and, you know, different off-chain protocols because they can be super fast, but if you have to store, you know, a new state for every single update, then that's not very good, right? And the other thing here is that you can kind of like say you can close it, you can go to the bucket and close out to basically reset the prior state, but that's not very good because now you have all these kind of like control transactions on the chain which aren't necessary and we want to make everything succinct itself.

So first going back, you know, in the history of basically how we currently do commit invalidation, right? So when, you know, channels first came across when the first day prior director of channels initially was like a BIP68 mechanism, right? What that means is that like BIP68 is kind of this like relative timeline thing, so we start out at like 30 days, right? Then we do an update and now it goes to 29. So we do an update and that goes to 28. And basically the way this enforced the latest state is that you can only broadcast the latest state using the time locks, right? If you had state 30, then I'm going to broadcast 28 before you can actually broadcast that because the time lock hasn't been expired yet, right? So drawback on this one is that like this has limited number of updates, right? So we can only actually do, you know, 29 updates or 30 updates or 50 updates or whatever else. We have to be able to lock that into the, you know, lifetime of the channel going on.

Then some people, you know, Decker and some other people made this thing called the invalidation tree, right? The thing with the invalidation tree is that you kept this, you know, decrementing time lock thing. Then you added like another layer on top of this, which is basically a tree layer, right? And because of the way the time locks work, you can only ever broadcast the, you know, you can't broadcast the leaf before you can broadcast through it itself, right? So basically, and also because they were bidirectional channels, they had to basically reset every now and then. They were constructed basically of two unidirectional channels. And when the balances get out of whack, we basically have to reset that. Every time we reset that, we have to never get the time lock. And every time we decorate the time lock, we have to measure this root thing. And that worked out pretty well because that could let you, you know, with a tweak called the kickoff transaction, that could basically have an indefinite lifetime channel, which is pretty cool. But the drawback of that is basically you have this additional off-chain footprint, right? So if you have this massive tree that you need to broadcast, it basically gets to your certain state. Now it's not very succinct because you have to broadcast the entire state and we want to make it even more, you know, make the state a little more succinct. And then kind of what we do now, we basically use the commitment verification thing, right? So basically the way it works is that every single state has a public key. When we go to the next state, you basically must give up that private key to that. And it's a little more complicated than that. That's how it works more or less. And the cool part about this is that we figure out this way to basically generate the public keys in a deterministic way. So what can happen is, like me as a client, I have a constant type state and I can basically do this kind of tree type, you know, to generate all these different secrets and you as the receiver, you can collapse these down into the particular state themselves, right?

So the goal here is basically to develop a commitment that actually has symmetric state, right? So one thing about commitment verification is now enlightening, that the state is actually asymmetric, right? And this is basically due to the way we ascribe the way. I know what my transaction looks like and you know what yours looks like, so therefore if you broadcast it on chain, I have what I need. But that can get word in terms of multiparty channels which are pretty cool. So if we can make them symmetric, multiparty channels can have this weird combinatoric state blow up and also we can basically make all the state much smaller itself.

So here's a review of basically the way we do revocations right now in lightning. I put 1.1. 1.1. I don't know. I guess I was thinking ahead, basically. So basically the way it works is that every single state has this thing called, we call it commitment port, right? Commitment port itself is just like an EC base point, right? And the way we develop the private, actually derive the private keys for each of these points is something called shaw chain, right? So shaw chain, you can think of it, you basically have a key K and you have an index I and it's going to give you this random element and I, right? And me as the receiver, because it has this particular structure, I can collapse them. Anytime I have shaw chain element number 10, I can forget everything else because I can re-derive everything else from shaw chain 10, more or less, right?

So we do this key derivation which is kind of complex, but the important takeaway here is that when we do the state update, basically, you give me a public key and then I basically do some easy math where it turns out that once I reveal the private keys to this thing, only you can actually sign for that state, right? So every single sign, we make one of these commitment points and the location point, we put it in this new commitment. When we go to the next state, you basically must reveal that to me and then that's how it works, right?

But this one has a few drawbacks. One thing is that it kind of gets involved because we were trying to, well, shaw 356, that doesn't exist, but we were trying to kind of defend against kind of like real key types of things like that, but I think we can get it even simpler, right? So this drawback, so this one is basically the client storage. He has to store the current state, but then he has kind of like log K state, which is log K where K is actually the number of state updates ever, but the outsourcer, it's a little bit worse than the outsourcer because the outsourcer needs a signature for every single state and then in addition to that, it needs a signature for any other HCLC that we have and it also needs to basically collapse this log K state itself. So the goal here is to make it a little bit simpler and make it more succinct.

So now a diversion basically. So I'm proposing basically this addition to Bitcoin called op check sig from stack, right? So Bitcoin, you know, check signatures, you probably have like millimeters of millimeters signatures when you're validating blockchain itself. One thing in Bitcoin is that, you know, the message digest is always assumed to be, you know, this thing called the SIG hash, right? So anytime there's a signature operation, implicitly we generate this thing called the SIG hash, which is derived from the transaction itself and the SIG hash, you can show basically what's being signed itself, right? So that's cool, but it's a little bit restrictive. So you know, I'm thinking like, you know, what if we can add the ability to basically actually generate, validate signatures on arbitrary messages, right? So now this is like super, super powerful because they can let you do things kind of like, you can do like delegation. I could say, Hey, you know, here, here's Bob public key. It's signed by mine. Therefore we can actually take this output. We can do something like oracles, right? We can say, okay, this is an integer assigned by Bitfinex and we're going to use it for some contract. We can, we can also do things like kind of like, have these like blessed message structures where your protocol, you know, has like a message that may be kind of opaque. We had a particular structure and this can only be signed by both participants, right? So this act is evidence that we're actually, we actually sign this at some point in the future and we can use this evidently drawn.

But so this is kind of like a very strong proposal, but it's not like super soft work, say if we're Bitcoin or anything like that. But basically, you know, you have message signature, public key, maybe you have like a version, maybe, you know, you'd have like different signatures in the future or we're going to have like an ECSA or whatever else. It basically tells you if it is valid, you know, regular Bitcoin, you'd have like an op drop and all this other stuff, but we're doing this for simplicity for now.

All right. So now to the new commitment and validation. So this thing I call it signed things commitments, right? So rather than now us basically using this revocation model, what we do is every single state has a state number, right? We then commit to that state number and we signed the commitment, right? And that signed commitment goes into the script itself, right? And this is cool because we have this like random number R, so when you look at the script, you don't really know what state we're on, right? But in order to actually do the revocation, what we do is we say, hey, if you can open this commitment itself and then, you know, because it's signed, you know, you can't like really forge it because it's like a two or two multi-sig, you can open the commitment and then show me another commitment opening whose R sequence number is greater than the one in this commitment and that means that there was some point in history where two of you cooperated and signed this new state and you went back to the project and tried to cheat me, right? So this is like a little bit simpler. Basically what we have is a signed sequence number. You prove to me that there's a new sequence number and we commit to it because we hide, you know, the state of it because it could be the case that like when we go to chain, we don't necessarily want to prove, want to, you know, reveal to the participants basically how many states we've done in the thing itself.

So yeah, you know, so signing is basically pretty simple. You basically have this number R which we derive from some deterministic method. We increment the state number. We have C and then, you know, signature is important because it's actually an accurate signature, right? It's going to be a signature between, you know, between both of us and, you know, the few techniques you can do for this. You can do these like two-party ECDSA like MPC techniques. There's some aggregated signature stuff. Give me a talk about tomorrow. Basically it's just somehow we collaborate and do the signature and it works in slide easier itself, right?