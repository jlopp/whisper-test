I'm going to basically go over ways that I've been thinking about hardening Lightning in terms of basically making security better, making the client more scalable itself, and introducing some issues and pain points that come up when you're dealing with fees on the main net. There's going to be some changes I'm going to propose to Bitcoin, but in my opinion they're relatively minor so I can maybe see a pretty good chance of them getting in. There aren't really big sweeping changes. One's a new saycatch type and one is a new opcode and then there's covenants, but that's a whole other story in itself, though.

So a quick overview first. I won't really go into the mechanics of Lightning itself as is now because I assume people know what that is vaguely. You have payment channels, you connect them, you can route across them, and that's the gist of it. I'm going to talk about hardening the contract breach events. Some people talk about ways you can do that in terms of adding more consensus changes. I'm going at it from a point of view of doing a different strategy when a breach actually happens in the face of a large backlog. Then I'll go into a new channel type, a new channel design for basically making the channels more succinct, meaning you have to store less history and also things like outsourcing get a lot more efficient as well. Then I'm going to talk about outsourcing and a newer model and a model that assumes how to basically minimize the client as much as possible because if you want this to actually scale and the outsourcing to basically support a large number of clients, then we basically want them to store as little state as possible itself. Then we go into basically making Lightning a little more succinct on chain because if it's an off chain protocol, you want to basically ensure that we have the smallest footprint on chain as possible, right? Otherwise, it's not really scaling because you're hitting the chain every single time so it's going to be off chain itself.

All right. So first, security model. So there's this little layers of Lightning over here. People always say it's like layer two, but to me there's a lot more layers on top of that. So for me, layer one is basically the blockchain itself, Bitcoin or whatever else that is. Layer two is actually just the link layer between channels, right? So this is basically how do I open channels between me and Bob and how do Bob and I actually update that channel? Layer three is kind of like the end to end routing, so like HTLCs and end routing, whatever else that is. Then layer four is kind of like the application layer. We're actually building a couple of Lightning things like exchanges and whatever.

I have emojis there, but I guess it didn't translate somehow. That's okay.

So basically the way Lightning works, it basically uses Bitcoin as or whatever else, probably Bitcoin is basically like a discrete mediation system, right? So rather than every single transaction going on Bitcoin itself, we basically say, all right, we do contract creation on Bitcoin itself and we do enforcement, but the execution is actually off chain, right? So we do the creation initially, then we do all the execution on the side, and that makes it really succinct and that's fine. And basically what we do, we basically treat the chain as like trust anchor, right? Basically the way it works is that any time we have a dispute, we basically go to the blockchain with our evidence, and with that evidence we can basically say that, hey, Bob was cheating me, he violated clause number five in the contract, and then I get all the money back basically, right?

And basically the way it is, we kind of have the easy way or the hard way. Optimistically, we can basically just do everything off chain, or if we're actually going to exit the contract, then we kind of do like signature between each other, and boom, it goes on chain, everything's fine. The hard way is basically in the case that I have to go on chain and either sweep contracts myself or possibly go on chain to actually do a proper dispute because you violated something in the contract itself. And when we're handling disputes, we basically say that we can write the chain eventually. Eventually this is basically time parameter called T, which is like a CSV value, right? Which means that any time someone goes to chain, there's basically like a contestation period, and I have up until time T to basically refute their claim, right? And we say eventually because T can be configured, you basically want to configure T based on the size of the channel. If it's a $10 channel, maybe you want a few hours, if it's a million dollars, maybe you want a month or whatever else, right?

And the other thing we assume as well is that we're assuming that miners or pool operators aren't colluding against us, basically, because otherwise they can basically just censor all our transactions on chain, right? And we also assume a level of decentralization of mining, because otherwise you can get blacklisted, but there are ways where you can try to make the channels basically blend in with everything else in the network, and there's some really cool work on that front too itself.

So but yeah. All right, moving on. Now let's talk a little bit about contract breach defense strategy, right? So something that comes up a lot is basically people are asking, all right, how do I handle contract breach in the case of basically massive backlog, right? This is the case where maybe for whatever reason fees are sky high, someone's spamming the chain, and then someone tries to actually do a contract breach. What am I going to do from there on, right? So there's some things that people worked on in terms of adding new consensus changes to Bitcoin, maybe something like the time lock would stop after the block was so full, or possibly you'd have some kind of preallocated arena where you can do battle for your smart contracts. This is basically looking from a little more strategic standpoint and looking at basically the dynamics on the fees of the way we actually handle the commit transaction itself, right?

So whenever someone tries to broadcast a prior state, maybe I should have this out of order, but that's okay, they're basically locked into that particular state, right? So Bob basically had $2 on the new estate and he had 10 on the other estate, he's going to go back to the $10 estate, right? At that point, Bob can only access just his money from the channel itself, right? But me myself, because he actually revoked all those outputs, I have a little more rigor room. So what I can do is basically I can progressively start to siphon Bob fees basically into miners fees, right? So this is now a situation where it's kind of like some strategy there because Bob basically has two options. He can either pay his fees stop or I can keep going and I'm going to eventually siphon all his money into miners fees, right? The only way his will actually succeed basically getting that prior transaction into the chain is if he pays more in miners fees than actually in his balance himself, right? And he can either do that by using pay-as-repairant, well, that's the only option really, right? So I think this is a pretty good kind of intermediate approach and basically what we're doing here is that the gesture transaction is going to be replaced by fee. We're going to use that to progressively bump up and sign from the fees the money of the cheater basically into fees. And I think it's a pretty good stop gap in terms of the way things work right now. If you have someone that can be a little bit of a villain at all, you can almost always penalize this person, right? So there's a massive backlog. Assuming the miner wants the package with a higher fee rate, then well, Bob basically gets nothing, right? So now this basically adds even further incentive from actually people trying to do cheating because now there's this kind of strategy where basically I can just pull your money to miners fees and you get nothing. And I'm still made whole this entire time. So whenever this happens, I'm okay. I want to punish Bob, right? This is me punishing him in the worst way possible and I'm going to basically jump to the queue for everything else in the mempool, right? So I could have put maybe like 20 BTC towards fees and I'm fine. I'm just punishing him. So basically squished earth and I basically wipe my hands and I walk away and everything is okay.

All right. So now we're going to talk about basically kind of like scaling lightning itself, right? You know, basically from the client side of it, right? So basically the way it works is that because contract execution is local, we kind of have like a local transcript, right? And every single time we do a new state update, there's kind of like a shadow chain, right? By shadow chain, I basically mean that we have kind of like a blockchain itself because the states refer to each other in a particular way, but also we can basically do state transitions between these states themselves, right? And the shadow chain is only ever manifested on chain in the case of basically like a contract breach or if I just want to force close, right? Typically in the normal case, we basically do a regular cooperative close, which means we both sign the multisig, we go on chain, you see nothing else, right? So the shadow chain is only manifested in the case of a breakdown or some type of breach remedy thing, right?

And the state transitions we have in the channel, they can be super generic, probably like later this year, it could get even fancier, some cooler stuff. Right now it's basically adding new HCLCs, removing HCLCs and keeping track of that prior state itself. So the goal here is basically to reduce the amount of state that the client needs to keep track of. This can be good because if they can keep track of less state, they can basically have kind of like more high throughput changes, but also it has implications for the outsourcer, which I'll get into a little bit later, right? If the state required for the client to actually act on the contract is reduced, that makes the outsourcer more succinct as well. If the outsourcer is succinct, then people are going to rent them and if people are going to rent them, we have more security, so it's kind of like a laudable goal to actually go forward.

So, first, before we get into this, we're going to talk a little bit about the history of basically how you do commitment and validation on Lightning, right? So I was talking about basically that you have a series of states and you basically walk forward in these states one by one, right? Every single time we go towards a new state, we basically revoke the old one, right? So that's like state sequence, we were on state number one, revoked it, state number two revoked it, now we're on state number three, right? So like a central question, basically the way we do channels, basically how do you do invalidation? One thing to note is that this only matters for bidirectional channels when you're basically going both ways, right? If it's a unidirectional channel, every single state update I do is basically benefiting the other participant in some way so they don't really have an incentive to go back on the prior states. But if it's a bidirectional channel, there's likely some point in history where we are currently in which the other participant was better off, right? So they have some incentive to basically try to cheat me and try to go back to that prior state, but we solve this basically by invalidating every single state once we make a new one, right? And the penalty here is that if I ever catch you, which is in the contract, if I ever catch you broadcasting a prior state, you basically get slashed, which means your money all goes away and that kind of has some tragedy in that other thing itself, right? So you're naively, you basically keep all the prior states, right? But that's not very good because now you have this linear, linearly going storage as you're going to do these updates, right? People like lightning and different off chain protocols because they can be super fast, but if you have to store a new state for every single update, then that's not very good, right? And the other thing here is that you can kind of like say you can close, you can go to the bucket and close out to basically reset the prior state, but that's not very good because now you have all these kind of control transactions on the chain which aren't necessary, we want to make everything succinct itself.

So first going back in the history basically how we currently do command and validation, right? So when we first came across, initially it was like a BIP68 mechanism, right? What that means is that BIP68 is kind of this relative time lock thing, so we start out at 30 days, right? Then we do an update and now it goes to 29. We do an update and that goes to 28. And basically the way you can disenforce the latest state is that you can only broadcast the latest state using the time locks, right? If you had state 30, then I'm going to broadcast 28 before you can actually broadcast that because the time lock hasn't been expired yet, right? So drawback on this one is that this has a limited number of updates, right? So we can only actually do 29 updates or 30 updates or 50 updates or whatever else. We have to lock that into the lifetime of the channel going on.

Then some other people made this thing called the invalidation tree, right? The thing with the invalidation tree is that you kept this decrementing time lock thing, then you added another layer on top of this which is basically a tree layer, right? And because of the way the time locks work, you can only ever broadcast the -- you can't broadcast the leak before you can broadcast the root itself, right? So basically -- and also because they were bi-directional channels, they had to basically reset every now and then. They were constructed basically of two unidirectional channels and when the balances get out of whack, we have to reset that. Every time we reset that, we have to set the time lock and every time we set the time lock, we have to measure this root thing. And that worked out pretty well because that could let you -- you know, with a tweak called the kickoff transaction, that could let you basically have an indefinite lifetime channel, which is pretty cool. But the drawback of that is basically you have this additional off-chain footprint, right? So if you have this massive tree that you need to broadcast to basically get to your certain state, now it's not very succinct because you have to broadcast the entire state and we want to make it even more -- make the state a little more succinct. And then kind of what we do now, we basically use this commitment verification thing, right? So basically the way it works is that every single state has a public key. When we go to the next state, you basically must give up that private key to that. It's a little more complicated than that. That's how it works more or less. And the cool part about this is that we figure out this way to basically generate the public keys in a deterministic way. So what can happen here, like me as the client, I have a constantized state and I can basically do this kind of tree type, you know, choose a random number generator thing to basically generate all these different secrets and you as the receiver, you can collapse these down into the particular state themselves, right?

So the goal here is basically to develop a commitment that actually has symmetric state, right? So one thing about commit revocations now in Lightning, that the state is actually asymmetric, right? And this is basically due to the way we ascribe blame. I know what my transaction looks like and you know what yours looks like, so therefore if you broadcast it on chain, I have what I need. But that can get worried in terms of multiparty channels, which are pretty cool. So if we can make them symmetric, multiparty channels will have this weird kind of combinatoric state blow up and also we can basically make all the states much smaller itself.

So here's a review of basically the way we do revocations right now in Lightning. Well, I put 1.1. We're on 1.0. I don't know. I guess I was thinking ahead, basically. So basically the way it works is that every single state has this thing we call a commitment point, right? The commitment point itself is just like an EC base point, right? And the way we develop the private, actually derive the private keys for each of these points is a thing called shorchain, right? So shorchain, you can think of it, you basically have a key k and you have an index i, it's going to give you this random element an i, right? And me as the receiver, because it has this particular structure, I can collapse them. Anytime I have shorchain element number 10, I can forget everything else because I can re-derive everything else from shorchain 10 more or less, right?

So we do this key derivation, which is kind of complex, but the important takeaway here is that when we do the state update, basically, you give me a public key and then I basically do some EC math where it turns out that once I reveal the private key to this thing, only you can actually sign for that state, right? So every single time we make one of these commitment points and the location point, we put it in this new commitment. When we go to the next state, you basically must reveal that to me and then that's how it works, right?

But this one has a few drawbacks. One thing is that it kind of gets involved because we were trying to like, well, shorah 356, that's how it exists, but we were trying to defend against the kind of like road key attacks and things like that, but I think we can get even simpler, right? Some of the drawbacks of this one is basically the client storage. He has to store the current state, but then he has kind of like log K state, which is log K, where K is actually the number of state updates ever, but the outsourcer, it's a little bit worse than the outsourcer because the outsourcer needs a signature for every single state and then in addition to that, it needs a signature for any other ACLC that we have and it also needs to collapse this log K state itself. So the goal here is to make it a little bit simpler and make it more succinct.

So now a diversion basically. So I'm proposing basically this addition to Bitcoin called op check sync from stack, right? So Bitcoin, you know, check signatures, you probably have like millions and hundreds of millions of signatures when you're validating the blockchain itself. One thing in Bitcoin is that the method digest is always assumed to be this thing called the SIG hash, right? So any time there's a signature operation, implicitly we generate this thing called the SIG hash, which is derived from the transaction itself and the SIG hash factor that you control basically what's being signed itself, right? So that's cool, but it's a little bit restrictive. So I'm thinking like, you know, what if we can add the ability to basically actually generate validate signatures on arbitrary messages, right? So now this is like super, super powerful because they can let you do things kind of like you can do like delegation. I could say, hey, you know, here's Bob's public key. It's signed by mine, therefore we can actually take this out. We can do things like oracles, right? We can say, okay, this is an integer signed by Biphinx and we're going to use it for some contract. We can also do things like kind of like have these blessed message structures where your protocol has like a message that may be kind of opaque, but has a particular structure and this can only be signed by both participants, right? So this is evidence that we actually signed this at some point in the future and we can use this evidently later on.

But so this is kind of like a very strong proposal, but it's not like super soft work safe or Bitcoin or anything like that. But basically, you know, you have message signature, public key, maybe you have like a version, maybe, you know, you have like different signatures in the future or we're going to have like an ECSA or whatever else, basically tells you if it is valid. You know, regularly Bitcoin you'd have like an op drop and all this other stuff, but we're doing this for simplicity for now.

All right, so now to the new commitment and validation. So those things are called signed signals commitments, right? So rather than now us basically using this revocation model, what we do is every single state has a state number, right? We then commit to that state number and we sign the commitment, right? And that signed commitment goes into the script itself, right? And you know, this is cool because we have this like random number R, so when you look at the script, you don't really know what state we're on, right? But in order to actually do the revocation, what we do is we say, hey, if you can open this commitment itself and then, you know, because it's signed, you know, you can't like really forge it because it's like a true or false multi-sig. You can open the commitment and then show me another commitment opening whose R sequence number is greater than the one in this commitment and that means that there was some point in history where two of you cooperated to sign this new state and you went back to the project to try to cheat me, right? So this is like, this is a little bit simpler. Basically what we have is a signed sequence number, you prove to me that there's a newer sequence number and we commit to it because we hide, you know, the state of it because it could be the case that like when we go to chain, we don't necessarily want to prove, want to, you know, reveal to the participants basically how many states we've done in the thing itself.

So yeah, you know, so signing is basically pretty simple. You basically have this number R which we derive from some deterministic method, we increment the state number, we have C and then, you know, the signature is important because it's actually an aggregate signature, right? It's going to be a signature between, you know, between both of us and, you know, the few techniques you can do for this, you can do these like two-party ECDSA like MPC techniques. There's some aggregate signature stuff that we're going to talk about tomorrow. Basically it's just somehow we collaborate and do the signature and it works in a lot easier itself, right?